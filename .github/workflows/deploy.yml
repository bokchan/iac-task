name: Build and Deploy Application
on:
  push:
    branches:
      - main

  pull_request:
    types: [opened, synchronize]
permissions:
  id-token: write # Required for OIDC authentication with AWS
  contents: read # Required to check out the repository

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-image-tag.outputs.image_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get image tag (Git SHA)
        id: get-image-tag
        run: echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Use dev role for all operations (simplified approach)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_ECR_ROLE_ARN }}
          role-session-name: GitHubActions-ECR-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        working-directory: ./webapp
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.get-image-tag.outputs.image_tag }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.get-image-tag.outputs.image_tag }}

  deploy-dev:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Dev
      # AWS credentials already configured in build-and-deploy job
      # Use dev deployment role with scoped permissions for dev environment only
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_DEV_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-DevDeploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python and Install Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
      - run: pip install uv && uv pip compile pyproject.toml -o requirements.txt --no-deps && uv pip install --system -r requirements.txt
        working-directory: ./infra

      - name: Cache CDK
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-cdk-v2

      - name: Install AWS CDK
        run: npm install -g aws-cdk
        working-directory: ./infra

      - name: Deploy to Dev Environment
        working-directory: ./infra
        run: |
          cdk deploy \
            --require-approval never \
            --all \
            -c environment=dev \
            -c image_tag=${{ needs.build-and-deploy.outputs.image_tag }}

  deploy-prod:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.get-alb-url.outputs.url }} # Optional: Display the ALB URL in the approval UI
    steps:
      # Steps for prod deployment.
      # The manual approval is configured in GitHub repository settings for the 'production' environment.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use prod deployment role with strict conditions for production environment only
      - name: Configure AWS Credentials for Prod Deployment
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_PROD_DEPLOY_ROLE_ARN }}
          role-session-name: GitHubActions-ProdDeploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Python and Install Dependencies
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
      - run: pip install uv && uv sync --all-packages
        working-directory: ./infra

      - name: Cache CDK
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-global-cdk-v2

      - name: Install AWS CDK
        run: npm install -g aws-cdk
        working-directory: ./infra

      - name: Deploy to Prod Environment
        working-directory: ./infra
        run: |
          cdk deploy --all \
            --require-approval never \
            -c environment=prod \
            -c image_tag=${{ needs.build-and-deploy.outputs.image_tag }}
